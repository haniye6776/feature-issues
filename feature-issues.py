# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HuKwbB_Xkw5y4tTCbBWaLHc51a0BSk4m
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.decomposition import PCA
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif
from sklearn.preprocessing import OneHotEncoder
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

from google.colab import drive
drive.mount('/content/gdrive')

data = pd.read_csv('gdrive/My Drive/hotel_bookings.csv')
data

if data.duplicated().any():
    print(data.duplicated().sum(),"has duplicate data.")
else:
    print("no duplicate.")

data.drop_duplicates(inplace=True)

data.isnull().sum()

data['children']=data['children'].fillna(0)

sn.countplot(x=data['country'])

data['country']=data['country'].fillna("Unknown")

plt.figure(figsize = (15, 10))

corr = data.corr()
sn.heatmap(corr, annot = True, linewidths = 1)
plt.show()

correlation = data.corr()['is_canceled'].abs().sort_values(ascending = False)
correlation

data['agent']=data['agent'].fillna(0)

data['company']=data['company'].fillna(0)

data.isnull().sum()

X = data.drop(['is_canceled'],axis=1)
y = data['is_canceled']

X = pd.get_dummies(X,drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

lr = LogisticRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
conf = confusion_matrix(y_test, y_pred_lr)
clf_report = classification_report(y_test, y_pred_lr)
print(conf)
print(clf_report)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)
conf = confusion_matrix(y_test, y_pred_knn)
clf_report = classification_report(y_test, y_pred_knn)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)
conf = confusion_matrix(y_test, y_pred_dt)
clf_report = classification_report(y_test, y_pred_dt)
print(conf)
print(clf_report)

newx=X_train
newxtest=X_test

newx['lead_time'] = np.log(newx['lead_time'] + 1)
newx['arrival_date_week_number'] = np.log(newx['arrival_date_week_number'] + 1)
newx['arrival_date_day_of_month'] = np.log(newx['arrival_date_day_of_month'] + 1)

newxtest['lead_time'] = np.log(newxtest['lead_time'] + 1)
newxtest['arrival_date_week_number'] = np.log(newxtest['arrival_date_week_number'] + 1)
newxtest['arrival_date_day_of_month'] = np.log(newxtest['arrival_date_day_of_month'] + 1)

lr = LogisticRegression()
lr.fit(newx, y_train)
newy_pred_lr = lr.predict(newxtest)
conf = confusion_matrix(y_test, newy_pred_lr)
clf_report = classification_report(y_test, newy_pred_lr)
print(conf)
print(clf_report)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(newx, y_train)
newy_pred_knn = knn.predict(newxtest)
conf = confusion_matrix(y_test, newy_pred_knn)
clf_report = classification_report(y_test, newy_pred_knn)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(newx, y_train)
newy_pred_dt = dt.predict(newxtest)
conf = confusion_matrix(y_test, newy_pred_dt)
clf_report = classification_report(y_test, newy_pred_dt)
print(conf)
print(clf_report)

pca = PCA(n_components=3)
principalComponents = pca.fit_transform(newx)
newxpca = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3'])
principalComponents = pca.transform(newxtest)
newxtestpca = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3'])

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(newxpca, y_train)
py_pred_knn = knn.predict(newxtestpca)
conf = confusion_matrix(y_test, py_pred_knn)
clf_report = classification_report(y_test, py_pred_knn)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(newxpca, y_train)
py_pred_dt = dt.predict(newxtestpca)
conf = confusion_matrix(y_test, py_pred_dt)
clf_report = classification_report(y_test, py_pred_dt)
print(conf)
print(clf_report)

lda = LDA(n_components=1)
newxlda = lda.fit_transform(newx, y_train)
newxtestlda = lda.transform(newxtest)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(newxlda, y_train)
ly_pred_knn = knn.predict(newxtestlda)
conf = confusion_matrix(y_test, ly_pred_knn)
clf_report = classification_report(y_test, ly_pred_knn)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(newxlda, y_train)
ly_pred_dt = dt.predict(newxtestlda)
conf = confusion_matrix(y_test, ly_pred_dt)
clf_report = classification_report(y_test, ly_pred_dt)
print(conf)
print(clf_report)

seltrain=pd.concat([newx["lead_time"],newx["required_car_parking_spaces"],newx["adr"],newx["total_of_special_requests"],newx["booking_changes"]],axis=1)
seltest=pd.concat([newxtest["lead_time"],newxtest["required_car_parking_spaces"],newxtest["adr"],newxtest["total_of_special_requests"],newxtest["booking_changes"]],axis=1)

lr = LogisticRegression()
lr.fit(seltrain, y_train)
sy_pred_lr = lr.predict(seltest)
conf = confusion_matrix(y_test, sy_pred_lr)
clf_report = classification_report(y_test, sy_pred_lr)
print(conf)
print(clf_report)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(seltrain, y_train)
sy_pred_knn = knn.predict(seltest)
conf = confusion_matrix(y_test, sy_pred_knn)
clf_report = classification_report(y_test, sy_pred_knn)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(seltrain, y_train)
sy_pred_dt = dt.predict(seltest)
conf = confusion_matrix(y_test, sy_pred_dt)
clf_report = classification_report(y_test, sy_pred_dt)
print(conf)
print(clf_report)

sel = VarianceThreshold(threshold=(0.2))
svtrain=sel.fit_transform(newx)
svtest=sel.transform(newxtest)

lr = LogisticRegression()
lr.fit(svtrain, y_train)
svy_pred_lr = lr.predict(svtest)
conf = confusion_matrix(y_test, svy_pred_lr)
clf_report = classification_report(y_test, svy_pred_lr)
print(conf)
print(clf_report)

dt = DecisionTreeClassifier()
dt.fit(svtrain, y_train)
svy_pred_dt = dt.predict(svtest)
conf = confusion_matrix(y_test, svy_pred_dt)
clf_report = classification_report(y_test, svy_pred_dt)
print(conf)
print(clf_report)



